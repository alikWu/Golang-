
规则引擎用来“隔离变化”、“解耦决策逻辑”

为什么要做规则引擎？
业务代码中往往包含了大量的case，case by case 到处都是条件的判断和选择，当这些if-else/switch等条件不停增加，代码就开始变得难以维护，同样也会产生以下问题：
无法直观表达现有业务逻辑，新人入手困难。
新增&改动逻辑困难，极难扩展；通用处理成本高。
每次变更逻辑时都需要经历一次完整的研发-测试-发布-回测-灰度，效率低成本高。

隔离这部分无法避免的业务决策逻辑，让逻辑变得清晰可独立维护。


适用用场景
（1）抽奖

不同的人&不同的场景对应不同的奖池（不同的中奖概率、不同的奖品集合），常见玩法：转盘、九宫格、砸金蛋等。
（2）任务

任务领取规则、任务完成指标动态可配（不同的人不同的任务，指标条件可动态配置&组合），常见玩法：答题、游戏类活动。
3）通用激励模型

不同的用户特征对应不同的激励程度（不同的人在不同的场景下，对于奖励的感知程度都是不同的，例如新用户与老用户奖品）。常见玩法：签到打卡，砍价、拼团。
4）通用触达模型

差异化文案内容。常见玩法：答题测试、个人年终报告等等。

了解了规则引擎在活动场景的应用，我们平时可以看看常用的活动逻辑，思考是否可以将某个流程规则化。因为产品源于生活。


会员营销：用由多种条件，流程，奖励组合而成，时间线复杂，代码复用率不高，调整频繁
风控规则：用由多种条件组合并返回决策，条件量大且复杂，变动频繁
数据分析：将数据通过自己编排的规则产出想要的数据，千人千面
（灵活业务：追求玩法花里胡哨，今天上线又要调整，研发测试心力交瘁）



Q&A
https://tech.youzan.com/rule-config-platform/
规则灰度发布流程 怎么实现的？

规则的灰度上线。当一条新规则创建后，如果不进行灰度的测试，直接上线是可能会带来灾难的。后面再规则上线流程中新增灰度上线环节，整个引擎会根据配置的灰度比例，复制一定的流量到灰度规则中，并对灰度规则的效果进行展示，达到预期效果并稳定后才能审批上线。
